//
//  DIP.swift
//  DesignPatterns
//
//  Created by zmj27404 on 16/5/28.
//  Copyright © 2016年 leichunfeng. All rights reserved.
//
//  依赖倒转原则(DIP)：抽象不应该依赖细节，细节应该依赖于抽象。针对接口编程，不要对实现编程
//  里氏代换原则(LSP):一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类对象和子类对象的区别。也就是说，在软件里面，把父类都替换成它的子类，程序的行为没有变化。 里氏代换原则(LSP):子类型必须能够替换掉它们的父类型(ASD)。只有当子类可以替换掉父类，软件单位的功能不受到影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为。由于子类型的可替换性才使得使用父类型的模块在无需修改的情况下就可以扩展。
//  依赖倒转其实可以说是面向对象设计的标志，用哪种语言来编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类或者接口，那就是面向对象的设计，反之那就是过程化的设计了。

import Foundation
